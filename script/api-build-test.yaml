AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Cluster and CodePipeline to Build from Github

Parameters:
  AWSRegion:
    Type: String
    Description: AWS Region

Resources:
  # VPC 생성
  APIVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: APIVpc
  # Subnet 생성
  # public a -> region-a
  APIPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.0.0/24
      VpcId: !Ref APIVpc
      AvailabilityZone: !Sub ${AWSRegion}a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: API-public-subnet-a
        - Key: Type
          Value: Public
  # public c -> region-c
  APIPublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.1.0/24
      VpcId: !Ref APIVpc
      AvailabilityZone: !Sub ${AWSRegion}c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: API-public-subnet-c
        - Key: Type
          Value: Public
  # private a -> region-a
  APIPrivatSubneteA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.8.0/24
      VpcId: !Ref APIVpc
      AvailabilityZone: !Sub ${AWSRegion}a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: API-private-subnet-a
        - Key: Type
          Value: Isolated
  # private c -> region-c
  APIPrivatSubneteC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.1.9.0/24
      VpcId: !Ref APIVpc
      AvailabilityZone: !Sub ${AWSRegion}c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: API-private-subnet-c
        - Key: Type
          Value: Isolated

  APIPublicSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref APIVpc
      Tags:
        - Key: Name
          Value: API-public-subnet-network-acl

  APIPublicSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref APIPublicSubnetA
      NetworkAclId: !Ref APIPublicSubnetNetworkAcl

  APIPublicSubnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref APIPublicSubnetC
      NetworkAclId: !Ref APIPublicSubnetNetworkAcl

  APIPublicSubnetNetworkAclInboudRullAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APIPublicSubnetNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  APIPublicSubnetNetworkAclOutboundRuleAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APIPublicSubnetNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  APIIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: API-igw

  APIVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref APIVpc
      InternetGatewayId: !Ref APIIgw

  APINatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  APINatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt APINatGatewayEIP.AllocationId
      SubnetId: !Ref APIPublicSubnetA

  APIPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref APIVpc
      Tags:
        - Key: Name
          Value: API-public-route-table

  APIPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: APIVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref APIPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref APIIgw

  APIPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APIPublicSubnetA
      RouteTableId: !Ref APIPublicRouteTable

  APIPublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APIPublicSubnetC
      RouteTableId: !Ref APIPublicRouteTable

  APIPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref APIVpc
      Tags:
        - Key: Name
          Value: API-private-route-table

  APIPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: APIVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref APIPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref APINatGateway

  APIPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APIPrivatSubneteA
      RouteTableId: !Ref APIPrivateRouteTable

  APIPrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APIPrivatSubneteC
      RouteTableId: !Ref APIPrivateRouteTable

  APILoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: API Load Balancer Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: API-LB-SG
      VpcId: !Ref APIVpc

  APIWASSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: API WAS Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Descirption: Allow all outbound traffic by default
          IpProtocol: -1
      SecurityGroupIngress:
        - Description: Allow all inbound traffic by default
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
          SourceSecurityGroupId: !Ref APILoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: API-WAS-SG
      VpcId: !Ref APIVpc

  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: API-TargetGroup
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref APIVpc
      TargetType: ip

  APILoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: API-LoadBalanecer
      Subnets:
        - !Ref APIPublicSubnetA
        - !Ref APIPublicSubnetC
      SecurityGroups:
        - !Ref APILoadBalancerSecurityGroup
      Type: application
      Tags:
        - Key: Name
          Value: API-LoadBalancer

  APILoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref APILoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup
