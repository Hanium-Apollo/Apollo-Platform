AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Cluster and CodePipeline to Build from Github

# Parameter 입력
Parameters:
  AWSRegion:
    Type: String
    Description: AWS Region
  accountId:
    Type: String
    Description: AWS Account ID
  GithubRepositoryName:
    Type: String
    Description: Github Repository Name
  RepoLogin:
    Type: String
    Description: Github User Login
  RepoLocation:
    Type: String
    Description: Github Repository URL
  GithubToken:
    Type: String
    Description: Github OAuth Token

Resources:
  # VPC 생성
  APITestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.2.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: APITestVpc
  # Subnet 생성
  # public a -> region-a
  APIPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.0.0/24
      VpcId: !Ref APITestVpc # 이름에 "test" 추가
      AvailabilityZone: !Sub ${AWSRegion}a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: API-public-subnet-a
        - Key: Type
          Value: Public
  # public c -> region-c
  APIPublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.1.0/24
      VpcId: !Ref APIVpc
      AvailabilityZone: !Sub ${AWSRegion}c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: API-public-subnet-c
        - Key: Type
          Value: Public
  # private a -> region-a
  APIPrivatSubneteA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.8.0/24
      VpcId: !Ref APIVpc
      AvailabilityZone: !Sub ${AWSRegion}a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: API-private-subnet-a
        - Key: Type
          Value: Isolated
  # private c -> region-c
  APIPrivatSubneteC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.9.0/24
      VpcId: !Ref APIVpc
      AvailabilityZone: !Sub ${AWSRegion}c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: API-private-subnet-c
        - Key: Type
          Value: Isolated

  APIPublicSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref APIVpc
      Tags:
        - Key: Name
          Value: API-public-subnet-network-acl

  APIPublicSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref APIPublicSubnetA
      NetworkAclId: !Ref APIPublicSubnetNetworkAcl

  APIPublicSubnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref APIPublicSubnetC
      NetworkAclId: !Ref APIPublicSubnetNetworkAcl

  APIPublicSubnetNetworkAclInboudRullAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APIPublicSubnetNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  APIPublicSubnetNetworkAclOutboundRuleAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APIPublicSubnetNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  # Internet Gateway 생성
  APIIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: API-igw

  # Internet Gateway와 VPC 연결
  APIVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref APIVpc
      InternetGatewayId: !Ref APIIgw

  # NAT Gateway 생성
  APINatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway와 Subnet 연결
  APINatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt APINatGatewayEIP.AllocationId
      SubnetId: !Ref APIPublicSubnetA

  # Public Route Table 생성
  APIPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref APIVpc
      Tags:
        - Key: Name
          Value: API-public-route-table

  # Public Route Table에 Internet Gateway 연결
  APIPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: APIVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref APIPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref APIIgw

  # Public Route Table 연결
  APIPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APIPublicSubnetA
      RouteTableId: !Ref APIPublicRouteTable

  APIPublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APIPublicSubnetC
      RouteTableId: !Ref APIPublicRouteTable

  # Private Route Table 생성
  APIPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref APIVpc
      Tags:
        - Key: Name
          Value: API-private-route-table

  # Private Route Table에 NAT Gateway 연결
  APIPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: APIVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref APIPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref APINatGateway

  # Private Route Table 연결
  APIPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APIPrivatSubneteA
      RouteTableId: !Ref APIPrivateRouteTable

  APIPrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APIPrivatSubneteC
      RouteTableId: !Ref APIPrivateRouteTable

  # API Load Balancer Security Group 생성
  APILoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: API Load Balancer Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: API-LB-SG
      VpcId: !Ref APIVpc

  # API WAS Security Group 생성
  APIWASSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: API WAS Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      SecurityGroupIngress:
        - Description: Allow all inbound traffic by default
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
          SourceSecurityGroupId: !Ref APILoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: API-WAS-SG
      VpcId: !Ref APIVpc

  # 대상그룹 설정
  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: API-TargetGroup
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref APIVpc
      TargetType: ip

  # Load Balancer 생성
 APITestLoadBalancer: # 이름에 "test" 추가
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: API-Test-LoadBalancer # 이름에 "test" 추가
      Subnets:
        - !Ref APIPublicSubnetA
        - !Ref APIPublicSubnetC
      SecurityGroups:
        - !Ref APILoadBalancerSecurityGroup
      Type: application
      Tags:
        - Key: Name
          Value: API-Test-LoadBalancer # 이름에 "test" 추가

  # Load Balancer Listener 생성
  APILoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref APILoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref APITargetGroup

  # ECR Repository 생성
  APIECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref GithubRepositoryName

  # Code Build 역할 생성
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  # Code Build 프로젝트 생성
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: Apollo-Server-Build-test
      Description: Apollo server build project
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: GITHUB
        Location: !Ref RepoLocation
        BuildSpec: !Sub |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region ${AWSRegion} | docker login --username AWS --password-stdin ${accountId}.dkr.ecr.${AWSRegion}.amazonaws.com
            build:
              commands:
                - echo "Building Docker image..."
                - docker build -t ${GithubRepositoryName}:latest . 
            post_build:
              commands:
                - echo "Tagging Docker image..."
                - docker tag ${GithubRepositoryName}:latest ${accountId}.dkr.ecr.${AWSRegion}.amazonaws.com/${GithubRepositoryName}:latest
                - echo "Pushing Docker image..."
                - docker push ${accountId}.dkr.ecr.${AWSRegion}.amazonaws.com/${GithubRepositoryName}:latest
      Artifacts:
        Type: "NO_ARTIFACTS"
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:4.0"
        PrivilegedMode: true

  # ECS Cluster 생성
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Apollo-Server-Cluster

  # ECS Task Role 생성
  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "S3FullAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - "*"

  # ECS Task Excution Role 생성
  ECSTaskExcutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ECSTaskExecutionRoleUnique
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ECRTaskExcutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                Resource: "*"
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # ECS Task Definition 생성
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "my-task-definition"
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExcutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Memory: 1024
      CPU: 512
      ContainerDefinitions:
        - Name: "my-container"
          Image: !Sub ${accountId}.dkr.ecr.${AWSRegion}.amazonaws.com/${GithubRepositoryName}:latest
          PortMappings:
            - ContainerPort: 8080
          Memory: 1024
          Cpu: 512

    # Code Pipeline 서비스 역할 생성
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: APILoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref APIWASSecurityGroup
          Subnets:
            - !Ref APIPrivatSubneteA
            - !Ref APIPrivatSubneteC

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - elasticloadbalancing:*
              Resource: "*"

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !Ref ECSService

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  # Code Pipeline Artifact 저장소 생성
  CodePipelineArtifactStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: apollo-server-test-artifacts # 이름에 "test" 추가
      VersioningConfiguration:
        Status: Enabled

  # Code Pipeline 생성
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: Apollo-server-test-pipeline # 이름에 "test" 추가
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref RepoLogin
                Repo: !Ref GithubRepositoryName
                Branch: main
                OAuthToken: !Ref GithubToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeployToECS
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup