AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Cluster and CodePipeline to Build from Github

# Parameter 입력
Parameters:
  AWSRegion:
    Type: String
    Description: AWS Region
  accountId:
    Type: String
    Description: AWS Account ID
  GithubRepositoryName:
    Type: String
    Description: Github Repository Name
  RepoLogin:
    Type: String
    Description: Github User Login
  RepoLocation:
    Type: String
    Description: Github Repository URL
  GithubToken:
    Type: String
    Description: Github OAuth Token

Resources:
  # VPC 생성
  APITestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.2.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: APITestVpc
  # Subnet 생성
  # public a -> region-a
  APITestPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.0.0/24
      VpcId: !Ref APITestVpc # 이름에 "test" 추가
      AvailabilityZone: !Sub ${AWSRegion}a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: API-Test-public-subnet-a
        - Key: Type
          Value: Public
  # public c -> region-c
  APITestPublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.1.0/24
      VpcId: !Ref APITestVpc
      AvailabilityZone: !Sub ${AWSRegion}c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: API-Test-public-subnet-c
        - Key: Type
          Value: Public
  # private a -> region-a
  APITestPrivatSubneteA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.8.0/24
      VpcId: !Ref APITestVpc
      AvailabilityZone: !Sub ${AWSRegion}a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: API-Test-private-subnet-a
        - Key: Type
          Value: Isolated
  # private c -> region-c
  APITestPrivatSubneteC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.2.9.0/24
      VpcId: !Ref APITestVpc
      AvailabilityZone: !Sub ${AWSRegion}c
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: API-Test-private-subnet-c
        - Key: Type
          Value: Isolated

  APITestPublicSubnetNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref APITestVpc
      Tags:
        - Key: Name
          Value: API-Test-public-subnet-network-acl

  APITestPublicSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref APITestPublicSubnetA
      NetworkAclId: !Ref APITestPublicSubnetNetworkAcl

  APITestPublicSubnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref APITestPublicSubnetC
      NetworkAclId: !Ref APITestPublicSubnetNetworkAcl

  APITestPublicSubnetNetworkAclInboudRullAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APITestPublicSubnetNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  APITestPublicSubnetNetworkAclOutboundRuleAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref APITestPublicSubnetNetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  # Internet Gateway 생성
  APITestIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: API-test-igw

  # Internet Gateway와 VPC 연결
  APITestVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref APITestVpc
      InternetGatewayId: !Ref APITestIgw

  # NAT Gateway 생성
  APITestNatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway와 Subnet 연결
  APITestNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt APITestNatGatewayEIP.AllocationId
      SubnetId: !Ref APITestPublicSubnetA

  # Public Route Table 생성
  APITestPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref APITestVpc
      Tags:
        - Key: Name
          Value: API-Test-public-route-table

  # Public Route Table에 Internet Gateway 연결
  APITestPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: APITestVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref APITestPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref APITestIgw

  # Public Route Table 연결
  APITestPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APITestPublicSubnetA
      RouteTableId: !Ref APITestPublicRouteTable

  APITestPublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APITestPublicSubnetC
      RouteTableId: !Ref APITestPublicRouteTable

  # Private Route Table 생성
  APITestPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref APITestVpc
      Tags:
        - Key: Name
          Value: API-Test-private-route-table

  # Private Route Table에 NAT Gateway 연결
  APITestPrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: APITestVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref APITestPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref APITestNatGateway

  # Private Route Table 연결
  APITestPrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APITestPrivatSubneteA
      RouteTableId: !Ref APITestPrivateRouteTable

  APITestPrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref APITestPrivatSubneteC
      RouteTableId: !Ref APITestPrivateRouteTable

  # API Load Balancer Security Group 생성
  APITestLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: API Load Balancer Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: API-Test-LB-SG
      VpcId: !Ref APITestVpc

  # API WAS Security Group 생성
  APITestWASSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: API WAS Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: -1
      SecurityGroupIngress:
        - Description: Allow all inbound traffic by default
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
          SourceSecurityGroupId: !Ref APITestLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: API-Test-WAS-SG
      VpcId: !Ref APITestVpc

  # 대상그룹 설정
  # APITestTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: API-Test-TargetGroup
  #     Port: 8080
  #     Protocol: HTTP
  #     VpcId: !Ref APITestVpc
  #     TargetType: ip
 
  APITestTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: API-TargetGroupBlue
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref APITestVpc
      TargetType: ip

  APITestTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: API-TargetGroupGreen
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref APITestVpc
      TargetType: ip

  # Load Balancer 생성
  APITestLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: API-TestLoadBalanecer
      Subnets:
        - !Ref APITestPublicSubnetA
        - !Ref APITestPublicSubnetC
      SecurityGroups:
        - !Ref APITestLoadBalancerSecurityGroup
      Type: application
      Tags:
        - Key: Name
          Value: API-TestLoadBalancer

  # Load Balancer Listener 생성
  APITestLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref APITestLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref APITestTargetGroup

  # ECR Repository 생성
  APITestECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref GithubRepositoryName

  # Code Build 역할 생성
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  # Code Build 프로젝트 생성
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: Server-Test-Build-test
      Description: server build project
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: GITHUB
        Location: !Ref RepoLocation
        BuildSpec: !Sub |
          version: 0.2
          phases:
          # install:
          #     commands:
          #       - echo "Creating appspec.yaml file..."
          #       - |
          #         cat <<EOT >> appspec.yaml
          #         version: 0.0
          #         Resources:
          #           - TargetService:
          #               Type: AWS::ECS::Service
          #               Properties:
          #                 TaskDefinition: my-task-definition
          #                 LoadBalancerInfo:
          #                   ContainerName: my-container
          #                   ContainerPort: 8080
          #         EOT
          #       - echo "Creating taskdef.json file..."
            #     - aws ecs describe-task-definition --task-definition my-task-definition --query taskDefinition > taskdef.json
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region ${AWSRegion} | docker login --username AWS --password-stdin ${accountId}.dkr.ecr.${AWSRegion}.amazonaws.com
            build:
              commands:
                - echo "Building Docker image..."
                - docker build -t ${GithubRepositoryName}:latest . 
            post_build:
              commands:
                - echo "Tagging Docker image..."
                - docker tag ${GithubRepositoryName}:latest ${accountId}.dkr.ecr.${AWSRegion}.amazonaws.com/${GithubRepositoryName}:latest
                - echo "Pushing Docker image..."
                - docker push ${accountId}.dkr.ecr.${AWSRegion}.amazonaws.com/${GithubRepositoryName}:latest
            artifacts:
            files:"*"
            base-directory: .
      # Artifacts:
      #   Type: CODEPIPELINEㄴ
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:4.0"
        PrivilegedMode: true
  # ECS Cluster 생성
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Server-Test-Cluster

  # ECS Task Role 생성
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TestECSTaskRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: MyECSTaskS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - s3:ListStorageLensConfigurations
                  - s3:ListAccessPointsForObjectLambda
                  - s3:GetAccessPoint
                  - s3:PutAccountPublicAccessBlock
                  - s3:GetAccountPublicAccessBlock
                  - s3:ListAllMyBuckets
                  - s3:ListAccessPoints
                  - s3:PutAccessPointPublicAccessBlock
                  - s3:ListJobs
                  - s3:PutStorageLensConfiguration
                  - s3:ListMultiRegionAccessPoints
                  - s3:CreateJob
                Resource: "*"
              - Sid: VisualEditor1
                Effect: Allow
                Action: "s3:*"
                Resource: arn:aws:s3:::*

  # ECS Task Excution Role 생성
  ECSTaskExcutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TestECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
      Policies:
        - PolicyName: ECRTaskExcutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                Resource: "*"
        - PolicyName: CloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # ECS Task Definition 생성
  ECSTestGreenTaskDefinition:
  Type: AWS::ECS::TaskDefinition
  Properties:
    Family: "Test-task-definition"
    TaskRoleArn: !GetAtt ECSTaskRole.Arn
    ExecutionRoleArn: !GetAtt ECSTaskExcutionRole.Arn
    NetworkMode: awsvpc
    RequiresCompatibilities:
      - FARGATE
    Memory: 3072
    Cpu: 1024
    ContainerDefinitions:
      - Name: "Test-container"
        Image: !Sub ${accountId}.dkr.ecr.${AWSRegion}.amazonaws.com/${GithubRepositoryName}:latest
        PortMappings:
          - ContainerPort: 8080
  
  ECSTestBlueTaskDefinition:
  Type: AWS::ECS::TaskDefinition
  Properties:
    Family: "Test-task-definition"
    TaskRoleArn: !GetAtt ECSTaskRole.Arn
    ExecutionRoleArn: !GetAtt ECSTaskExcutionRole.Arn
    NetworkMode: awsvpc
    RequiresCompatibilities:
      - FARGATE
    Memory: 3072
    Cpu: 1024
    ContainerDefinitions:
      - Name: "Test-container"
        Image: !Sub ${accountId}.dkr.ecr.${AWSRegion}.amazonaws.com/${GithubRepositoryName}:latest
        PortMappings:
          - ContainerPort: 8080

    # Code Pipeline 서비스 역할 생성
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: APITestLoadBalancerListener
    Properties:
      ServiceName: Test-Server-Service
      Cluster: !Ref ECSCluster
      DesiredCount: 0 #유지해야할 작업 수
      TaskDefinition: !Ref ECSTestBlueTaskDefinition
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      LoadBalancers:
        - TargetGroupArn: !Ref APITestTargetGroupBlue
          ContainerName: "Test-container"
          ContainerPort: 8080
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref APITestWASSecurityGroup
          Subnets:
            - !Ref APITestPrivatSubneteA
            - !Ref APITestPrivatSubneteC
      # ServiceName: !Sub ${AWS::StackName}-ECSService

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - elasticloadbalancing:*
                - autoscaling:*
                - ecs:*
                - codedeploy:*
                - s3:*
              Resource: "*"

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
    ApplicationName: test-server-codedeploy

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !Ref APITestLoadBalancerListener
            TargetGroups:
              - Name: API-Test-TargetGroupBlue
              - Name: API-Test-TargetGroupGreen
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !Ref ECSService

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CloudFormationS3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: "*"
  # Code Pipeline Artifact 저장소 생성
  CodePipelineTestArtifactStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: server-test-artifacts 
      VersioningConfiguration:
        Status: Enabled

  # Code Pipeline 생성
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: server-test-pipeline 
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineTestArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref RepoLogin
                Repo: !Ref GithubRepositoryName
                Branch: main
                OAuthToken: !Ref GithubToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput
              # RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeployToECS
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                # AppSpecTemplate: #AppSpec 
                #   Fn::Sub:
                #     - |
                #       resources:
                #         - TargetService:
                #             Type: AWS::ECS::Service
                #             Properties:
                #               TaskDefinition: !GetAtt ECSTaskDefinition
                #               LoadBalancerInfo:
                #                 ContainerName: Test-container
                #                 ContainerPort: 8080
                #       version: 0.0
                #     - ECSTaskDefinition: !Ref ECSTaskDefinition
                # AppSpecTemplateArtifact: SourceOutput
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: BuildOutput
                AppSpecTemplateArtifact: BuildOutput
              RunOrder: 1